apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs =['libs']
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}
def SDK_BASENAME = "vsyoumars";
def SDK_VERSION = "_V1.0";
def sdkDestinationPath = "build";//生成jar存放目录

//打包release目录下的classes.jar(开启混淆后这个jar就是混淆的源码)
def releaseJar = file('build/intermediates/bundles/release/classes.jar')
//打包debug目录下的classes.jar
def debugJar = file('build/intermediates/bundles/debug/classes.jar')
//将libs目录下的gson打入jar包
//def thirdPartyJar = file('libs/gson-2.8.0.jar')

//打包jar前先删除原先的jar
task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(releaseJar)//导出混淆的jar
    //from zipTree(debugJar)//导出未混淆的jar
    //from zipTree(thirdPartyJar)将第三方jar包打入jar包
    //from fileTree(dir: 'src/main', includes: ['assets/**'])//将assets目录打入jar包
    exclude('**/BuildConfig.class')//排除不必要的class文件
    baseName = SDK_BASENAME + SDK_VERSION
    destinationDir = file(sdkDestinationPath)
}

makeJar.dependsOn(deleteBuild, build)
//=======生成jar包脚本 end=============================================

//运行脚本
//1.命令行方式：在Terminal输入gradlew makeJar
//2.图形界面方式：Gradle   :ModuleName Tasks   other   markJar